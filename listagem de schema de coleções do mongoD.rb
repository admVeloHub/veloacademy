listagem de schema de cole√ß√µes do mongoDB
<!-- VERSION: v1.7.1 | DATE: 2024-12-19 | AUTHOR: VeloHub Development Team -->

  üóÑÔ∏è Database Principal: console_conteudo

//schema console_conteudo.Artigos
{
_id: ObjectId,
tag: String,                    // Tag do artigo
categoria_id: String,           // ID da categoria
categoria_titulo: String,       // T√≠tulo da categoria
artigo_titulo: String,          // T√≠tulo do artigo
artigo_conteudo: String,        // Conte√∫do do artigo (FORMATADO - ver padr√µes abaixo)
createdAt: Date,                // Data de cria√ß√£o
updatedAt: Date                 // Data de atualiza√ß√£o
}

//schema console_conteudo.Bot_perguntas
{
_id: ObjectId,
pergunta: String,               // Pergunta do bot
resposta: String,               // Resposta do bot (FORMATADA - ver padr√µes abaixo)
palavrasChave: String,          // Palavras-chave
sinonimos: String,              // Sin√¥nimos
tabulacao: String,              // Tabula√ß√£o
createdAt: Date,                // Data de cria√ß√£o
updatedAt: Date                 // Data de atualiza√ß√£o
}

//schema console_conteudo.Velonews
{
_id: ObjectId,
titulo: String,                 // T√≠tulo da not√≠cia
conteudo: String,               // Conte√∫do da not√≠cia
isCritical: Boolean,            // Se √© not√≠cia cr√≠tica
createdAt: Date,                // Data de cria√ß√£o
updatedAt: Date                 // Data de atualiza√ß√£o
}

//schema console_conteudo.user_activity
{
_id: ObjectId,
colaboradorNome: String,           // Nome do colaborador
action: String,                    // Tipo de a√ß√£o (question_asked, feedback_given, article_viewed, ai_button_used)
details: {                         // Detalhes espec√≠ficos da a√ß√£o
  question: String,                // Pergunta feita (para question_asked)
  feedbackType: String,            // Tipo de feedback (positive/negative)
  messageId: String,               // ID da mensagem (para feedback)
  articleId: String,               // ID do artigo (para article_viewed)
  articleTitle: String,            // T√≠tulo do artigo
  formatType: String               // Tipo de formata√ß√£o (whatsapp/email)
},
sessionId: String,                 // ID da sess√£o
source: String,                    // Fonte da a√ß√£o (chatbot, ai_button, etc.)
createdAt: Date,                   // Data de cria√ß√£o
updatedAt: Date                    // Data de atualiza√ß√£o
}

//schema console_conteudo.bot_feedback
{
_id: ObjectId,
colaboradorNome: String,           // Nome do colaborador que deu o feedback
action: String,                    // Tipo de a√ß√£o (feedback_given)
messageId: String,                 // ID da mensagem que recebeu o feedback
sessionId: String,                 // ID da sess√£o
source: String,                    // Fonte da resposta (chatbot, ai_button, clarification, etc.)
details: {                         // Detalhes espec√≠ficos do feedback
  feedbackType: String,            // Tipo de feedback (positive/negative)
  comment: String,                 // Coment√°rio opcional do usu√°rio
  question: String,                // Pergunta original que gerou a resposta
  answer: String,                  // Resposta do bot que recebeu o feedback
  aiProvider: String,              // Provedor da IA (OpenAI, Gemini, null)
  responseSource: String           // Origem da resposta (bot_perguntas, ai, clarification, etc.)
},
createdAt: Date,                   // Data de cria√ß√£o
updatedAt: Date                    // Data de atualiza√ß√£o
}

üóÑÔ∏è Database: console_chamados

// schema DB console_chamados.tk_gest√£o
{
_id: ObjectId,
_genero: String,                // G√™nero do ticket
_tipo: String,                  // Tipo do ticket
_direcionamento: String,        // Direcionamento
_corpo: String,                 // Corpo do ticket
_data_hora: Date,               // Data e hora
createdAt: Date,                // Data de cria√ß√£o
updatedAt: Date                 // Data de atualiza√ß√£o
}

// schema DB console_chamados.tk_conteudos
{
_id: ObjectId,
_direcionamento: String,        // Direcionamento
_descri√ß√£o: String,             // Descri√ß√£o
_obs: String,                   // Observa√ß√µes
_data_hora: Date,               // Data e hora
createdAt: Date,                // Data de cria√ß√£o
updatedAt: Date                 // Data de atualiza√ß√£o
}


üóÑÔ∏è Database: console_config

// Schema Config
{
_id: ObjectId,
_userMail: String,              // Email do usu√°rio
_userId: String,                // ID do usu√°rio
_userRole: String,              // Papel do usu√°rio
_userClearance: {               // Permiss√µes do usu√°rio
  artigos: Boolean,
  velonews: Boolean,
  botPerguntas: Boolean,
  chamadosInternos: Boolean,
  igp: Boolean,
  qualidade: Boolean,
  capacity: Boolean,
  config: Boolean,
  servicos: Boolean
},
_userTickets: Object,           // Tipos de tickets
_funcoesAdministrativas: {      // Fun√ß√µes administrativas
  avaliador: Boolean            // Se √© avaliador no m√≥dulo Qualidade
}
}

//schema console_config.module_status
// Schema MongoDB atualizado
{
_id: ObjectId,
_trabalhador: String,    // Status do Cr√©dito Trabalhador
_pessoal: String,        // Status do Cr√©dito Pessoal  
_antecipacao: String,    // Status da Antecipa√ß√£o
_pgtoAntecip: String,    // Status do Pagamento Antecipado
_irpf: String,           // Status do M√≥dulo IRPF
_seguro: String,         // Status do M√≥dulo Seguro
createdAt: Date,         // Data de cria√ß√£o
updatedAt: Date          // Data de atualiza√ß√£o
}

//schema console_config.module_status para perguntas frequentes do bot
// Schema para dados di√°rios de perguntas frequentes do bot
{
_id: ObjectId,                   // ID obrigat√≥rio do MongoDB
dados: [String],                 // Array com as 10 perguntas mais feitas (apenas os textos)
totalPerguntas: Number,          // Total de perguntas no per√≠odo
updatedAt: Date                  // Data de atualiza√ß√£o (controle de versionamento)
}


//üóÑÔ∏è Schema de Ping de Usu√°rio
// de login ou refresh
{
_userId: String,                // ID do usu√°rio
_collectionId: String,          // ID da collection
createdAt: Date,                // Data de cria√ß√£o
updatedAt: Date                 // Data de atualiza√ß√£o
}

üóÑÔ∏è Database console_analises
9. schema console_analises.qualidade_avaliacoes
{
_id: ObjectId,
colaboradorNome: String,        // Nome do colaborador
avaliador: String,              // Avaliador
mes: String,                    // M√™s da avalia√ß√£o
ano: Number,                    // Ano da avalia√ß√£o
dataAvaliacao: Date,            // Data da avalia√ß√£o
arquivoLigacao: String,         // Base64 ou URL
nomeArquivo: String,            // Nome do arquivo
saudacaoAdequada: Boolean,      // Crit√©rio de avalia√ß√£o
escutaAtiva: Boolean,           // Crit√©rio de avalia√ß√£o
resolucaoQuestao: Boolean,      // Crit√©rio de avalia√ß√£o
empatiaCordialidade: Boolean,   // Crit√©rio de avalia√ß√£o
direcionouPesquisa: Boolean,    // Crit√©rio de avalia√ß√£o
procedimentoIncorreto: Boolean, // Crit√©rio de avalia√ß√£o
encerramentoBrusco: Boolean,    // Crit√©rio de avalia√ß√£o
moderado: Boolean,              // Se foi moderado
observacoesModeracao: String,   // Observa√ß√µes da modera√ß√£o
pontuacaoTotal: Number,         // Pontua√ß√£o total
createdAt: Date,                // Data de cria√ß√£o
updatedAt: Date,                // Data de atualiza√ß√£o
}

//schema console_analises.qualidade_funcionarios
{
_id: ObjectId,
colaboradorNome: String,        // Nome completo (padronizado)
dataAniversario: Date,          // Data de anivers√°rio
empresa: String,                // Empresa
dataContratado: Date,           // Data de contrata√ß√£o
telefone: String,               // Telefone
atuacao: String,                // Atua√ß√£o
escala: String,                 // Escala
acessos: [{                     // Array de acessos
  sistema: String,
  perfil: String,
  observacoes: String,
  updatedAt: Date
}],
desligado: Boolean,             // Se foi desligado
dataDesligamento: Date,         // Data de desligamento
afastado: Boolean,              // Se est√° afastado
dataAfastamento: Date,          // Data de afastamento
createdAt: Date,                // Data de cria√ß√£o
updatedAt: Date                 // Data de atualiza√ß√£o
}

//schema console_analises.qualidade_avaliacoes_gpt
{
_id: ObjectId,
avaliacao_id: ObjectId,         // Refer√™ncia √† avalia√ß√£o original (padronizado)
analiseGPT: String,             // An√°lise completa do GPT
pontuacaoGPT: Number,           // Pontua√ß√£o calculada pelo GPT (0-100)
criteriosGPT: {                 // Crit√©rios avaliados pelo GPT
  saudacaoAdequada: Boolean,
  escutaAtiva: Boolean,
  resolucaoQuestao: Boolean,
  empatiaCordialidade: Boolean,
  direcionouPesquisa: Boolean,
  procedimentoIncorreto: Boolean,
  encerramentoBrusco: Boolean
},
confianca: Number,              // N√≠vel de confian√ßa (0-100)
palavrasCriticas: [String],     // Palavras-chave cr√≠ticas mencionadas
calculoDetalhado: [String],     // Explica√ß√£o do c√°lculo da pontua√ß√£o
createdAt: Date,                // Data de cria√ß√£o
updatedAt: Date                 // Data de atualiza√ß√£o (padronizado)
}

// ========================================
// üìã PADR√ïES DE FORMATA√á√ÉO DE CONTE√öDO
// ========================================
// VERSION: v1.0.0 | DATE: 2024-12-19 | AUTHOR: VeloHub Development Team

/*
üéØ PADR√ïES DE FORMATA√á√ÉO PARA CONTE√öDO (Bot_perguntas.resposta e Artigos.artigo_conteudo)

1. QUEBRAS DE LINHA:
   - Usar \n para quebras de linha simples
   - Usar \n\n para separa√ß√£o de par√°grafos
   - Evitar mais de 2 \n consecutivos

2. LISTAS NUMERADAS:
   - Formato: "1. Item\n2. Item\n3. Item"
   - Sempre usar n√∫meros seguidos de ponto e espa√ßo
   - Uma quebra de linha entre cada item

3. LISTAS COM BULLETS:
   - Formato: "‚Ä¢ Item\n‚Ä¢ Item\n‚Ä¢ Item"
   - Usar bullet Unicode (‚Ä¢) seguido de espa√ßo
   - Uma quebra de linha entre cada item

4. NEGRITO E IT√ÅLICO:
   - Negrito: **texto** (markdown)
   - It√°lico: *texto* (markdown)
   - Evitar HTML tags (<b>, <i>, <strong>, <em>)

5. LINKS:
   - Formato: [texto do link](URL)
   - Sempre incluir texto descritivo
   - URLs completas com http/https

6. CARACTERES ESPECIAIS:
   - Usar encoding UTF-8 correto
   - Acentos: √°, √©, √≠, √≥, √∫, √£, √µ, √ß
   - S√≠mbolos: R$, %, ¬∫, ¬™, etc.

7. ESTRUTURA DE PAR√ÅGRAFOS:
   - M√°ximo 3-4 linhas por par√°grafo
   - Usar \n\n para separar se√ß√µes
   - Evitar blocos de texto muito longos

8. FORMATA√á√ÉO DE C√ìDIGOS/COMANDOS:
   - Usar `c√≥digo` para inline
   - Usar ```c√≥digo``` para blocos
   - Especificar linguagem quando relevante

9. FORMATA√á√ÉO DE DATAS:
   - Formato: DD/MM/AAAA
   - Hor√°rios: HH:MM (24h)
   - Evitar formatos amb√≠guos

10. FORMATA√á√ÉO DE VALORES:
    - Moeda: R$ 1.234,56
    - Percentuais: 15%
    - N√∫meros grandes: 1.000.000

EXEMPLOS DE FORMATA√á√ÉO CORRETA:

‚úÖ BOM:
"Para solicitar o cr√©dito trabalhador:

1. Acesse o portal VeloHub
2. Preencha os dados pessoais
3. Envie os documentos necess√°rios

**Importante:** O processo pode levar at√© 5 dias √∫teis.

Para mais informa√ß√µes, consulte: [Manual do Cr√©dito](https://manual.velohub.com)"

‚ùå RUIM:
"Para solicitar o cr√©dito trabalhador voc√™ deve acessar o portal VeloHub preencher os dados pessoais enviar os documentos necess√°rios o processo pode levar at√© 5 dias √∫teis para mais informa√ß√µes consulte o manual"

APLICA√á√ÉO:
- Bot_perguntas.resposta: Sempre formatar seguindo estes padr√µes
- Artigos.artigo_conteudo: Sempre formatar seguindo estes padr√µes
- Backend: Aplicar formata√ß√£o autom√°tica se conte√∫do n√£o estiver formatado
- Frontend: Renderizar formata√ß√£o markdown corretamente
*/
